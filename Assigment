# -*- coding: utf-8 -*-
"""
Spyder Editor
This is a temporary script file.

"""
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import seaborn as sns
from matplotlib import cm
plt.style.use('seaborn-whitegrid')

def calculate_srd_per_year(df,year): 
    df = df.loc[df_salaries['Working_Year']==year]
    mean = df['Salary_In_pounds'].mean()
    df['std_salary'] = df.apply(lambda row : row[10]-mean, axis=1)
    return df

def calculate_srd_(df): 
    mean = df['Salary_In_pounds'].mean()
    df['std_salary'] = df.apply(lambda row : row[10]-mean, axis=1)
    return df


def pie_data(df_2020,df_2021,df_2022):
    df_pie_data = pd.DataFrame()
    list = []
    value= np.sum(df_2020["Designation"].isin(['Data Scientist']))
    list.append([2020,'Data Scientist',value])
    value= np.sum(df_2020["Designation"].isin(['Data Analyst']))
    list.append([2020,'Data Analyst',value])
    value= np.sum(df_2020["Designation"].isin(['Data Engineer']))
    list.append([2020,'Data Engineer',value])
    
    value= np.sum(df_2021["Designation"].isin(['Data Scientist']))
    list.append([2021,'Data Scientist',value])
    value= np.sum(df_2021["Designation"].isin(['Data Analyst']))
    list.append([2021,'Data Analyst',value])
    value= np.sum(df_2021["Designation"].isin(['Data Engineer']))
    list.append([2021,'Data Engineer',value])
    
    value= np.sum(df_2022["Designation"].isin(['Data Scientist']))
    list.append([2022,'Data Scientist',value])
    value= np.sum(df_2022["Designation"].isin(['Data Analyst']))
    list.append([2022,'Data Analyst',value])
    value= np.sum(df_2020["Designation"].isin(['Data Engineer']))
    list.append([2022,'Data Engineer',value])
    
    df_pie_data = pd.DataFrame(list, columns=['Year', 'Designation','Number'])
    return df_pie_data

df_salaries = pd.read_csv('Data_Science_Fields_Salary_Categorization.csv', index_col=0)


df_salaries['Salary_In_Rupees'] = df_salaries['Salary_In_Rupees'].str.replace(',', '').astype(float)
df_salaries['Salary_In_pounds'] = df_salaries['Salary_In_Rupees']/(102)
df_salaries['Working_Year'] = df_salaries['Working_Year'].astype('int')

mean_value = df_salaries['Salary_In_pounds'].mean()
df_salaries.insert(0,"Salary_Tier", " ")
df_salaries.loc[(df_salaries['Salary_In_pounds'] >= mean_value), ['Salary_Tier']] = 0
df_salaries.loc[(df_salaries['Salary_In_pounds'] < mean_value), ['Salary_Tier']] = 1
df_salaries.dropna()

#selecting a few designation of interest 
df_selected = df_salaries.loc[df_salaries['Designation'].isin(['Data Scientist','Data Analyst','Data Engineer'])]
df_select_copy = df_selected.copy()


#Creating a dataframe only with numerical representations of the data
df_salaries_num = pd.DataFrame() 

df_salaries_num['Experience_num'] = df_selected['Experience']
df_salaries_num['Experience_num'].replace(['EN', 'MI','SE','EX'],[0,1,2,3], inplace=True)

df_salaries_num['Employment_Status_num'] = df_selected['Employment_Status']
df_salaries_num['Employment_Status_num'].replace(['FT', 'PT'],[0,1], inplace=True)

df_salaries_num['Company_Size_num'] = df_selected['Company_Size']
df_salaries_num['Company_Size_num'].replace(['S','M','L'],[0,1,2], inplace=True)

df_salaries_num['Salary_In_pounds_num'] = df_selected['Salary_In_pounds']

df_salaries_num['Designation_num'] = df_selected['Designation']
df_salaries_num = df_salaries_num.loc[df_salaries_num['Designation_num'].isin(['Data Scientist','Data Analyst','Data Engineer'])]
df_salaries_num['Designation_num'].replace(['Data Scientist','Data Analyst','Data Engineer'],[0,1,2], inplace=True)

df_salaries_num['Working_Year'] = df_selected['Working_Year']

df_salaries_num['Employee_Location'] = df_selected['Employee_Location']
df_salaries_num['Employee_Location'].replace(['US','GB','CA','DE'],[0,1,2,3], inplace=True)


#Plotting a graph to see the mean pf the salaries of each of these selected jobs per Large, Medium and Small company 
df_select_copy.pivot_table(index='Designation', columns='Company_Size', aggfunc={'Salary_In_pounds':np.mean}).plot.barh(title='Mean Salary for Selected Jobs for Company Size',subplots=True)


df_countries = df_selected.loc[df_selected['Employee_Location'].isin(['US','GB','CA','DE'])]
df_salaries_num = df_salaries_num[df_salaries_num['Employee_Location'].isin([0,1,2,3])]

#Calculating the mean for positions for the year 
df_2020 = df_countries.loc[df_countries['Working_Year']==2020]
df_2020_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2020]
mean= df_2020['Salary_In_pounds'].mean()
df_2020['std_salary'] = df_2020.apply(lambda row : row[10]-mean, axis=1)

df_2021 = df_countries.loc[df_countries['Working_Year']==2021]
df_2021_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2021]
mean= df_2021['Salary_In_pounds'].mean()
df_2021['std_salary'] = df_2021.apply(lambda row : row[10]-mean, axis=1)

df_2022 = df_countries.loc[df_countries['Working_Year']==2022]
df_2022_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2022]
mean= df_2022['Salary_In_pounds'].mean()
df_2022['std_salary'] = df_2022.apply(lambda row : row[10]-mean, axis=1)

plt.figure()

plt.hist(df_2020['Salary_In_pounds'], 25, alpha=0.5, label='2020',histtype='stepfilled')
plt.hist(df_2021['Salary_In_pounds'], 25, alpha=0.5, label='2021',histtype='stepfilled')
plt.hist(df_2022['Salary_In_pounds'], 25, alpha=0.5, label='2022',histtype='stepfilled')
plt.legend(loc='upper right')
plt.show()

#Scatter plot 
plt.figure()
plt.scatter(df_2020['Salary_In_pounds'],df_2020['Experience'],c=df_2020_num['Designation_num'],marker="d")
plt.scatter(df_2021['Salary_In_pounds'],df_2021['Experience'],c=df_2021_num['Designation_num'])
plt.scatter(df_2022['Salary_In_pounds'],df_2022['Experience'],c=df_2022_num['Designation_num'])
plt.legend(loc='upper right')
plt.show()

#Scatter plot
plt.figure()
groups = df_2020.groupby('Designation')
for name, group in groups:
    plt.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name)
plt.legend()

plt.figure()
groups = df_2021.groupby('Designation')
for name, group in groups:
    plt.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name)
plt.legend()

plt.figure()
groups = df_2022.groupby('Designation')
for name, group in groups:
    plt.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name)
plt.legend()

#Heating map 
df_ds = df_2020_num[df_2020_num['Designation_num']==0]
df_ds=df_ds.reset_index()
df_ds=df_ds.drop(["Working_Year"], axis=1)
df_ds=df_ds.drop(["Designation_num"], axis=1)
pear_corr=df_ds.corr(method='spearman')


fig, ax = plt.subplots(figsize=(10,10))
im = ax.imshow(pear_corr, interpolation='nearest')
fig.colorbar(im, orientation='vertical', fraction = 0.05)

# Show all ticks and label them with the dataframe column name
ax.set_xticklabels(df_ds.columns, rotation=65, fontsize=15)
ax.set_yticklabels(df_ds.columns, rotation=0, fontsize=15)

# Loop over data dimensions and create text annotations
for i in range(len(df_ds.columns)-1):
    for j in range(len(df_ds.columns)-1):
        text = ax.text(j, i, round(pear_corr.to_numpy()[i, j], 2),
                       ha="center", va="center", color="black")

plt.show()

#Getting the data for our piechart 

df_pie_data = pd.DataFrame() 
df_pie_data = pie_data(df_2020,df_2021,df_2022)
outer = df_pie_data.groupby('Year').sum()
inner = df_pie_data.groupby(['Year','Designation']).sum()
print(inner)
inner_labels = inner.index.get_level_values(1)
print(inner_labels)
fig, ax = plt.subplots(figsize=(24,12))
size = 0.3

cmap = plt.colormaps["Paired"]
cmap_inner = plt.colormaps["Pastel2"]
outer_colors = cmap(np.arange(3)*4)
inner_colors = cmap_inner([1, 2, 5, 6, 9, 10])

ax.pie(outer.values.flatten(), radius=1,
       labels=outer.index,
       colors=outer_colors,
       autopct='%1.1f%%',
       wedgeprops=dict(width=size, edgecolor='w'))

ax.pie(inner.values.flatten(), radius=1-size, 
       labels = inner_labels,
       colors=inner_colors,
       wedgeprops=dict(width=size, edgecolor='w'))

ax.set(aspect="equal", title='Selected Positions for each year')
plt.legend(loc=(-0.1, 0))
plt.show()

    
    

