# -*- coding: utf-8 -*-
"""
Spyder Editor
This is a temporary script file.

"""
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import seaborn as sns
plt.style.use('seaborn-whitegrid')

def calculate_srd_per_year(df,year): 
    df = df.loc[df_salaries['Working_Year']==year]
    mean = df['Salary_In_pounds'].mean()
    df['std_salary'] = df.apply(lambda row : row[10]-mean, axis=1)
    return df

def calculate_srd_(df): 
    mean = df['Salary_In_pounds'].mean()
    df['std_salary'] = df.apply(lambda row : row[10]-mean, axis=1)
    return df


def pie_data(df_2020,df_2021,df_2022):
    df_pie_data = pd.DataFrame()
    list_temp = []
    value= np.sum(df_2020["Designation"].isin(['Data Scientist']))
    list_temp.append([2020,'Data Scientist',value])
    value= np.sum(df_2020["Designation"].isin(['Data Analyst']))
    list_temp.append([2020,'Data Analyst',value])
    value= np.sum(df_2020["Designation"].isin(['Data Engineer']))
    list_temp.append([2020,'Data Engineer',value])
    
    value= np.sum(df_2021["Designation"].isin(['Data Scientist']))
    list_temp.append([2021,'Data Scientist',value])
    value= np.sum(df_2021["Designation"].isin(['Data Analyst']))
    list_temp.append([2021,'Data Analyst',value])
    value= np.sum(df_2021["Designation"].isin(['Data Engineer']))
    list_temp.append([2021,'Data Engineer',value])
    
    value= np.sum(df_2022["Designation"].isin(['Data Scientist']))
    list_temp.append([2022,'Data Scientist',value])
    value= np.sum(df_2022["Designation"].isin(['Data Analyst']))
    list_temp.append([2022,'Data Analyst',value])
    value= np.sum(df_2020["Designation"].isin(['Data Engineer']))
    list_temp.append([2022,'Data Engineer',value])
    
    df_pie_data = pd.DataFrame(list_temp, columns=['Year', 'Designation','Number'])
    return df_pie_data


df_salaries = pd.read_csv('Data_Science_Fields_Salary_Categorization.csv', index_col=0)

df_salaries['Salary_In_Rupees'] = df_salaries['Salary_In_Rupees'].str.replace(',', '').astype(float)
df_salaries['Salary_In_pounds'] = df_salaries['Salary_In_Rupees']/(102)
df_salaries['Working_Year'] = df_salaries['Working_Year'].astype('int')

mean_value = df_salaries['Salary_In_pounds'].mean()
df_salaries.insert(0,"Salary_Tier", " ")
df_salaries.loc[(df_salaries['Salary_In_pounds'] >= mean_value), ['Salary_Tier']] = 0
df_salaries.loc[(df_salaries['Salary_In_pounds'] < mean_value), ['Salary_Tier']] = 1
df_salaries.dropna()

#selecting a few designation of interest 
df_selected = df_salaries.loc[df_salaries['Designation'].isin(['Data Scientist','Data Analyst','Data Engineer'])]
df_select_copy = df_selected.copy()


#Creating a dataframe only with numerical representations of the data
df_salaries_num = pd.DataFrame() 

df_salaries_num['Experience_num'] = df_selected['Experience']
df_salaries_num['Experience_num'].replace(['EN', 'MI','SE','EX'],[0,1,2,3], inplace=True)

df_salaries_num['Employment_Status_num'] = df_selected['Employment_Status']
df_salaries_num['Employment_Status_num'].replace(['FT', 'PT'],[1,0], inplace=True)

df_salaries_num['Company_Size_num'] = df_selected['Company_Size']
df_salaries_num['Company_Size_num'].replace(['S','M','L'],[0,1,2], inplace=True)

df_salaries_num['Salary_In_pounds_num'] = df_selected['Salary_In_pounds']

df_salaries_num['Designation_num'] = df_selected['Designation']
df_salaries_num = df_salaries_num.loc[df_salaries_num['Designation_num'].isin(['Data Scientist','Data Analyst','Data Engineer'])]
df_salaries_num['Designation_num'].replace(['Data Scientist','Data Analyst','Data Engineer'],[0,1,2], inplace=True)

df_salaries_num['Working_Year'] = df_selected['Working_Year']

df_salaries_num['Employee_Location'] = df_selected['Employee_Location']
df_salaries_num['Employee_Location'].replace(['US','GB','CA','DE'],[0,1,2,3], inplace=True)


plt.figure(figsize = (15, 12))
grid = plt.GridSpec(3, 4, wspace =0.3, hspace = 0.3)
line = plt.subplot(grid[0, :2])
scatter1 = plt.subplot(grid[0, 2:])
pie_plot = plt.subplot(grid[1:, :2])
scatter2=plt.subplot(grid[1, 2:])
scatter3 = plt.subplot(grid[2, 2:])

#Calculating the mean for positions for the year 
df_2020 = df_selected.loc[df_selected['Working_Year']==2020]
df_2020_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2020]
mean= df_2020['Salary_In_pounds'].mean()
df_2020['std_salary'] = df_2020.apply(lambda row : row[10]-mean, axis=1)

df_2021 = df_selected.loc[df_selected['Working_Year']==2021]
df_2021_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2021]
mean= df_2021['Salary_In_pounds'].mean()
df_2021['std_salary'] = df_2021.apply(lambda row : row[10]-mean, axis=1)

df_2022 = df_selected.loc[df_selected['Working_Year']==2022]
df_2022_num = df_salaries_num.loc[df_salaries_num['Working_Year']==2022]
mean= df_2022['Salary_In_pounds'].mean()
df_2022['std_salary'] = df_2022.apply(lambda row : row[10]-mean, axis=1)

line = plt.subplot(grid[0, :2])

#Mean over the year 
df_line_data = pd.DataFrame()
cols_list = ['Designation',2020,2021,2022]
df_line_data['Designation'] = ['Data Analyst','Data Engineer','Data Scientist']
df_list = [df_2020,df_2021,df_2022]
i = 0 
mean_2020 = []
mean_2021 = []
mean_2022 = []
temp_list = [mean_2020,mean_2021,mean_2022]
while i<3: 
    temp_groups = df_list[i].groupby('Designation')
    for name, group in temp_groups: 
        mean = group['Salary_In_pounds'].mean()
        temp_list[i].append(mean)
    i = i +1

df_line_data['2020'] = mean_2020
df_line_data['2021'] = mean_2021
df_line_data['2022'] = mean_2022

df_line_data_t = df_line_data.reset_index().set_index('Designation')
df_line_data_t = df_line_data_t.drop('index',axis='columns')
df_line_data_t = df_line_data_t.T

line.plot(df_line_data_t.index,df_line_data_t['Data Analyst'] , '-ok',label ='Data Scientist',linewidth=4,color='green',alpha=0.5)
line.plot(df_line_data_t.index,df_line_data_t ['Data Engineer'] , '--o', color='blue',
         markersize=5, linewidth=4, label ='Data Engineer',
         markerfacecolor='white',
         markeredgecolor='red',
         markeredgewidth=1,alpha=0.5)
line.plot(df_line_data_t.index,df_line_data_t['Data Scientist'], '-p', color='orange', markersize=15, linewidth=4,
         markerfacecolor='white',
         markeredgecolor='gray',
         markeredgewidth=2,label ='Data Scientist',alpha=0.5)
line.set_title('Mean Salary over the years')
line.set_xlabel('Year')
line.set_ylabel('Mean Salary')
line.legend()


#Scatter plot
scatter1.set_xlabel('Salary')
scatter1.set_ylabel('Seniority')
groups = df_2020.groupby('Designation')
for name, group in groups:
    scatter1.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name,alpha=0.5)
scatter1.set_title('2020 Breakdown')
scatter1.legend()

scatter2.set_xlabel('Salary')
scatter2.set_ylabel('Seniority')
groups = df_2021.groupby('Designation')
for name, group in groups:
    scatter2.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name,alpha=0.5)
scatter2.set_title('2021 Breakdown')
scatter2.legend()

scatter3.set_xlabel('Salary')
scatter3.set_ylabel('Seniority')
groups = df_2022.groupby('Designation')
for name, group in groups:
    scatter3.plot(group['Salary_In_pounds'], group['Experience'], marker='o', linestyle='', markersize=12, label=name,alpha=0.5)
scatter3.set_title('2022 Breakdown')
scatter3.legend()

#Getting the data for our piechart
df_pie_data = pd.DataFrame() 
df_pie_data = pie_data(df_2020,df_2021,df_2022)
outer = df_pie_data.groupby('Year').sum()
inner = df_pie_data.groupby(['Year','Designation']).sum()
inner_labels = inner.index.get_level_values(1)
size = 0.3

cmap = plt.colormaps["Paired"]
cmap_inner = plt.colormaps["Pastel2"]
outer_colors = cmap(np.arange(3)*4)
inner_colors = cmap_inner([1, 2, 5, 6, 9, 10])

pie_plot.pie(outer.values.flatten(), radius=1,
       labels=outer.index,
       colors=outer_colors,
       wedgeprops=dict(width=size, edgecolor='w'),labeldistance=None)

pie_plot.pie(inner.values.flatten(), radius=1-size, 
       labels = inner_labels,
       colors=inner_colors,
       wedgeprops=dict(width=size, edgecolor='w') ,labeldistance=None)

pie_plot.set_title('All years and its composition')
pie_plot.legend(loc=(-0.1, 0))

